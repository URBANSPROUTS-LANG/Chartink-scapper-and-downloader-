import os import time import glob from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.chrome.service import Service from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.chrome.options import Options # === Config === SCREENER_URL = "https://chartink.com/screener/short-term-breakouts" DOWNLOAD_DIR = r"C:\Users\Muthulk\Downloads\chartink_csv" WAIT_TIME = 30 DOWNLOAD_TIMEOUT = 60 # === Chrome Options === chrome_options = Options() prefs = { "download.default_directory": DOWNLOAD_DIR, "download.prompt_for_download": False, "download.directory_upgrade": True, "safebrowsing.enabled": True } chrome_options.add_experimental_option("prefs", prefs) driver = webdriver.Chrome(service=Service(), options=chrome_options) wait = WebDriverWait(driver, WAIT_TIME) def wait_for_download(directory, timeout=DOWNLOAD_TIMEOUT): """Wait until a CSV file appears in directory.""" end_time = time.time() + timeout while time.time() < end_time: files = glob.glob(os.path.join(directory, "*.csv")) if files: return max(files, key=os.path.getctime) time.sleep(1) return None try: print(f"🚀 Opening screener: {SCREENER_URL}") driver.get(SCREENER_URL) wait.until(EC.presence_of_element_located((By.ID, "backtest-container"))) print("✅ Backtest section loaded") # === Click "Download CSV" button === csv_button = wait.until( EC.element_to_be_clickable((By.XPATH, "//div[normalize-space(text())='Download csv']")) ) driver.execute_script("arguments[0].scrollIntoView(true);", csv_button) time.sleep(1) csv_button.click() print("📥 Clicked Download CSV... waiting for file") # === Wait for download to finish === downloaded_file = wait_for_download(DOWNLOAD_DIR) if downloaded_file: print("✅ CSV downloaded:", downloaded_file) else: print("❌ Download failed or timed out") finally: driver.quit() print("🚪 Browser closed")
